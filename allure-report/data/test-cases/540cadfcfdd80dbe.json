{
  "uid" : "540cadfcfdd80dbe",
  "name" : "测试登录正常",
  "fullName" : "Testcases.m.test_2buy.TestLogin#test_login",
  "historyId" : "7eafb15f4efb110febad6d6632ce1448",
  "time" : {
    "start" : 1575974629451,
    "stop" : 1575974632443,
    "duration" : 2992
  },
  "description" : "这是密码登录的成功用例",
  "descriptionHtml" : "<p>这是密码登录的成功用例</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'https://login-m.yjq.com/' == 'https://m.yjq.com/'\n  - https://login-m.yjq.com/\n  ?         ------\n  + https://m.yjq.com/",
  "statusTrace" : "self = <Testcases.m.test_2buy.TestLogin object at 0x0000000004D83780>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"059a7988e4b24948b6b08784faa983e5\")>\n\n    @pytest.mark.demo\n    @allure.story('登录')\n    @allure.title('测试登录正常')\n    @allure.description('这是密码登录的成功用例')\n    def test_login(self,open_url1):\n        try:\n            lp(open_url1).login_pwd(bd.login_data[\"user\"],bd.login_data[\"passwd\"])\n            time.sleep(1.8)\n            assert True == ip(open_url1).login_check()\n            assert unquote(open_url1.current_url, encoding='utf-8') == 'https://m.yjq.com/'\n        except AssertionError as e:\n            Filelist = get_filelist(contants.reports_screen)\n            with open(Filelist[0], \"rb\") as f:\n                context = f.read()\n                allure.attach(context, \"错误图片\", attachment_type=allure.attachment_type.PNG)\n>               raise e\n\ntest_2buy.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Testcases.m.test_2buy.TestLogin object at 0x0000000004D83780>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"059a7988e4b24948b6b08784faa983e5\")>\n\n    @pytest.mark.demo\n    @allure.story('登录')\n    @allure.title('测试登录正常')\n    @allure.description('这是密码登录的成功用例')\n    def test_login(self,open_url1):\n        try:\n            lp(open_url1).login_pwd(bd.login_data[\"user\"],bd.login_data[\"passwd\"])\n            time.sleep(1.8)\n            assert True == ip(open_url1).login_check()\n>           assert unquote(open_url1.current_url, encoding='utf-8') == 'https://m.yjq.com/'\nE           AssertionError: assert 'https://login-m.yjq.com/' == 'https://m.yjq.com/'\nE             - https://login-m.yjq.com/\nE             ?         ------\nE             + https://m.yjq.com/\n\ntest_2buy.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "open_url1",
    "time" : {
      "start" : 1575974623666,
      "stop" : 1575974629449,
      "duration" : 5783
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "session_action",
    "time" : {
      "start" : 1575974623665,
      "stop" : 1575974623666,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "这是密码登录的成功用例",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'https://login-m.yjq.com/' == 'https://m.yjq.com/'\n  - https://login-m.yjq.com/\n  ?         ------\n  + https://m.yjq.com/",
    "statusTrace" : "self = <Testcases.m.test_2buy.TestLogin object at 0x0000000004D83780>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"059a7988e4b24948b6b08784faa983e5\")>\n\n    @pytest.mark.demo\n    @allure.story('登录')\n    @allure.title('测试登录正常')\n    @allure.description('这是密码登录的成功用例')\n    def test_login(self,open_url1):\n        try:\n            lp(open_url1).login_pwd(bd.login_data[\"user\"],bd.login_data[\"passwd\"])\n            time.sleep(1.8)\n            assert True == ip(open_url1).login_check()\n            assert unquote(open_url1.current_url, encoding='utf-8') == 'https://m.yjq.com/'\n        except AssertionError as e:\n            Filelist = get_filelist(contants.reports_screen)\n            with open(Filelist[0], \"rb\") as f:\n                context = f.read()\n                allure.attach(context, \"错误图片\", attachment_type=allure.attachment_type.PNG)\n>               raise e\n\ntest_2buy.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Testcases.m.test_2buy.TestLogin object at 0x0000000004D83780>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"059a7988e4b24948b6b08784faa983e5\")>\n\n    @pytest.mark.demo\n    @allure.story('登录')\n    @allure.title('测试登录正常')\n    @allure.description('这是密码登录的成功用例')\n    def test_login(self,open_url1):\n        try:\n            lp(open_url1).login_pwd(bd.login_data[\"user\"],bd.login_data[\"passwd\"])\n            time.sleep(1.8)\n            assert True == ip(open_url1).login_check()\n>           assert unquote(open_url1.current_url, encoding='utf-8') == 'https://m.yjq.com/'\nE           AssertionError: assert 'https://login-m.yjq.com/' == 'https://m.yjq.com/'\nE             - https://login-m.yjq.com/\nE             ?         ------\nE             + https://m.yjq.com/\n\ntest_2buy.py:36: AssertionError",
    "steps" : [ {
      "name" : "验证码登录",
      "time" : {
        "start" : 1575974629451,
        "stop" : 1575974630606,
        "duration" : 1155
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "user",
        "value" : "'17625188013'"
      }, {
        "name" : "passwd",
        "value" : "'ghm1234'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "7ea1c02749232c11",
      "name" : "错误图片",
      "source" : "7ea1c02749232c11.png",
      "type" : "image/png",
      "size" : 65569
    }, {
      "uid" : "343dd403a4db00aa",
      "name" : "log",
      "source" : "343dd403a4db00aa.txt",
      "type" : "text/plain",
      "size" : 1834
    }, {
      "uid" : "d3e403243887f4c",
      "name" : "stdout",
      "source" : "d3e403243887f4c.txt",
      "type" : "text/plain",
      "size" : 111
    }, {
      "uid" : "db7f7e67561b9b0d",
      "name" : "stderr",
      "source" : "db7f7e67561b9b0d.txt",
      "type" : "text/plain",
      "size" : 2331
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "open_url1::0",
    "time" : {
      "start" : 1575974632516,
      "stop" : 1575974635970,
      "duration" : 3454
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "session_action::0",
    "time" : {
      "start" : 1575974635973,
      "stop" : 1575974635973,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "登录"
  }, {
    "name" : "feature",
    "value" : "每日用例-加购"
  }, {
    "name" : "tag",
    "value" : "demo"
  }, {
    "name" : "parentSuite",
    "value" : "Testcases.m"
  }, {
    "name" : "suite",
    "value" : "test_2buy"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "JS-CS-002"
  }, {
    "name" : "thread",
    "value" : "2544-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Testcases.m.test_2buy"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "demo" ]
  },
  "source" : "540cadfcfdd80dbe.json",
  "parameterValues" : [ ]
}