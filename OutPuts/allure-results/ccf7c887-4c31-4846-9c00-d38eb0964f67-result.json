{"name": "测试镜片加入购物车", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/product?productId=1544772850182649314\" class=\"\">...</a> is not clickable at point (348, 130). Other element would receive the click: <div class=\"searchlast-mianhead\">...</div>\n  (Session info: chrome=79.0.3945.88)", "trace": "self = <Testcases.m.test_2buy.TestLogin object at 0x0000000004E34748>\nopen_url1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7aef42f0364459a69cdfa1fa6a268fbc\")>\n\n    @pytest.mark.demo\n    @allure.story('测试镜片加入购物车')\n    @allure.title('测试镜片加入购物车')\n    @allure.description('这是镜片加入购物车的成功用例')\n    def test_buy_jp(self, open_url1):\n        hp(open_url1).search(bd.success_data_jp[\"title\"])\n        time.sleep(2)\n        # 是否进入搜索结果页\n        assert unquote(open_url1.current_url, encoding='utf-8') == bd.success_data_jp[\"check_url\"]\n        # 点击进入商品详情页,并切换窗口\n>       hp(open_url1).click_jp()\n\ntest_2buy.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\PageObjects\\m\\home_page.py:42: in click_jp\n    self.click_element(hpl.jp,'进入镜片商品详情页面并切换窗口')\n..\\..\\common\\basepage.py:111: in click_element\n    ele.click()\nE:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nE:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nE:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000004E39E80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...x750A343D+18]\\\\n\\\\tRtlInitializeExceptionChain [0x76EC9812+99]\\\\n\\\\tRtlInitializeExceptionChain [0x76EC97E5+54]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/product?productId=1544772850182649314\" class=\"\">...</a> is not clickable at point (348, 130). Other element would receive the click: <div class=\"searchlast-mianhead\">...</div>\nE         (Session info: chrome=79.0.3945.88)\n\nE:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "description": "这是镜片加入购物车的成功用例", "steps": [{"name": "搜索商品", "status": "passed", "parameters": [{"name": "title", "value": "'凯米拓牌1.67折射率镜片防辐射'"}], "start": 1576767742559, "stop": 1576767743643}, {"name": "点击进入镜片商品详情页面", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/product?productId=1544772850182649314\" class=\"\">...</a> is not clickable at point (348, 130). Other element would receive the click: <div class=\"searchlast-mianhead\">...</div>\n  (Session info: chrome=79.0.3945.88)\n\n", "trace": "  File \"E:\\Python3\\lib\\site-packages\\allure_commons\\_allure.py\", line 141, in impl\n    return func(*a, **kw)\n  File \"D:\\B2B\\PageObjects\\m\\home_page.py\", line 42, in click_jp\n    self.click_element(hpl.jp,'进入镜片商品详情页面并切换窗口')\n  File \"D:\\B2B\\common\\basepage.py\", line 111, in click_element\n    ele.click()\n  File \"E:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"E:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"E:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"E:\\Python3\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1576767745694, "stop": 1576767747248}], "attachments": [{"name": "log", "source": "c3a6f6bc-f530-4796-a8ab-5451ed2a353e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "eae76f03-d891-4d7b-b6b9-d680803eb790-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1252c6f6-c202-4910-b23b-809d72920a07-attachment.txt", "type": "text/plain"}], "start": 1576767742559, "stop": 1576767747259, "uuid": "0b674f0f-6633-470f-b40f-fbe3e4d6c27e", "historyId": "0b1272a11653404344abf6f4a8b79852", "fullName": "Testcases.m.test_2buy.TestLogin#test_buy_jp", "labels": [{"name": "story", "value": "测试镜片加入购物车"}, {"name": "feature", "value": "每日用例-加购"}, {"name": "tag", "value": "demo"}, {"name": "parentSuite", "value": "Testcases.m"}, {"name": "suite", "value": "test_2buy"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "JS-CS-002"}, {"name": "thread", "value": "9432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.m.test_2buy"}]}